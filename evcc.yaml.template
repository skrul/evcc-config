log: ${LOG}
network:
  port: ${PORT}

interval: ${INTERVAL}

mqtt:
  broker: ${MQTT_BROKER}
  topic: evcc
  user: ${MQTT_USER}
  password: ${MQTT_PASSWORD}

${DISABLE_INFLUX}influx:
${DISABLE_INFLUX}  url: ${INFLUX_URL}
${DISABLE_INFLUX}  database: ${INFLUX_DATABASE}
${DISABLE_INFLUX}  token: ${INFLUX_TOKEN}
${DISABLE_INFLUX}  org: ${INFLUX_ORG}

site:
  title: Home # display name for UI
  meters:
    grid: my_grid
    pv:
      - my_pv
    battery:
      - my_battery
  residualPower: 100

loadpoints:
  - title: Garage # display name for UI
    charger: my_charger
    vehicle: tesla # default vehicle

meters:
  - name: my_grid
    type: custom
    power:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: (-1 * .payload.Ptogrid) + .payload.Ptouser
      timeout: 30s
    energy:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: .payload.Einv_day
      timeout: 30s
  - name: my_pv
    type: custom
    power:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: .payload.Pall
      timeout: 30s
    energy:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: .payload.Epv1_day + .payload.Epv2_day + .payload.Epv3_day
      timeout: 30s
  - name: my_battery
    type: custom
    power:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: (-1 * .payload.Pcharge) + .payload.Pdischarge
      timeout: 30s
    soc:
      source: mqtt
      topic: ${DONGLE_ID}/inputbank1
      jq: .payload.SOC
      timeout: 30s
    # {"setting": "DischgPowerPercentCMD", "value": 94.0, "from": "homeassistant"}
    # 1: normal, 2: hold, 3: charge
    batterymode:
      source: mqtt
      topic: ${DONGLE_ID}/update
      payload: '{"setting": "DischgPowerPercentCMD", "value": {{ if eq .batteryMode 1 }}100{{ else }}0{{ end }}, "from": "evcc"}'

chargers:
  - name: my_charger
    type: custom
    power:
      source: http
      uri: "${TESLA_BLE_PROXY}:8080/api/1/vehicles/${TESLA_VIN}/vehicle_data?endpoints=charge_state"
      method: GET
      jq: .response.response.charge_state.charger_voltage * .response.response.charge_state.charger_actual_current
      timeout: 30s
    status:
      source: http
      uri: "${TESLA_BLE_PROXY}:8080/api/1/vehicles/${TESLA_VIN}/vehicle_data?endpoints=charge_state"
      method: GET
      jq: >
        if (.response.response.charge_state.charging_state == "Charging" 
            and .response.response.charge_state.charger_power > 0) then "C"
        elif (.response.response.charge_state.charging_state == "Charging") then "B"
        elif (.response.response.charge_state.charging_state == "Stopped") then "B"
        elif (.response.response.charge_state.charging_state == "NoPower") then "B"
        elif (.response.response.charge_state.charging_state == "Complete") then "B"
        elif (.response.response.charge_state.charging_state == "Starting") then "B"
        else "A" end
      timeout: 30s
    enabled:
      source: http
      uri: "${TESLA_BLE_PROXY}:8080/api/1/vehicles/${TESLA_VIN}/vehicle_data?endpoints=charge_state"
      method: GET
      jq: (.response.response.charge_state.charging_state == "Charging" 
           and .response.response.charge_state.charger_power > 0)
      timeout: 30s
      cache: 25s
    enable:
      source: http
      uri: "${TESLA_BLE_PROXY}:8080/api/1/vehicles/${TESLA_VIN}/command/{{if .enable}}charge_start{{else}}charge_stop{{end}}"
      method: POST
      body: ""
      timeout: 30s
      cache: 25s
    maxcurrent:
      source: http
      uri: "${TESLA_BLE_PROXY}:8080/api/1/vehicles/${TESLA_VIN}/command/set_charging_amps"
      method: POST
      body: '{"charging_amps": "{{.maxcurrent}}"}'
      timeout: 30s

vehicles:
  - name: tesla
    type: template
    template: tesla-ble
    vin: ${TESLA_VIN}
    url: ${TESLA_BLE_PROXY}
    capacity: ${TESLA_CAPACITY}

messaging:
  events:
    start: # charge start event
      title: Charge started
      msg: Started charging in "${mode}" mode
    stop: # charge stop event
      title: Charge finished
      msg: Finished charging ${chargedEnergy:%.1fk}kWh in ${chargeDuration}.
    connect: # vehicle connect event
      title: Car connected
      msg: "Car connected at ${pvPower:%.1fk}kW PV"
    disconnect: # vehicle connected event
      title: Car disconnected
      msg: Car disconnected after ${connectedDuration}
    soc: # vehicle soc update event
      title: Soc updated
      msg: Battery charged to ${vehicleSoc:%.0f}%
    guest: # vehicle could not be identified
      title: Unknown vehicle
      msg: Unknown vehicle, guest connected?
  services:
    - type: pushover
      app: ${PUSHOVER_APP_TOKEN}
      recipients: [${PUSHOVER_RECIPIENT_USER_KEYS}]

tariffs:
  currency: USD
  grid:
      type: custom
      price:
        source: const
        value: 0
      formula: |
        base := 0.35;
        if ts.Month() >= 6 && ts.Month() <= 9 {
          base = 0.40;
          if ts.Hour() >= 15 && ts.Hour() < 16 {
            base = 0.45
          } else if ts.Hour() >= 16 && ts.Hour() < 21 {
            base = 0.62
          } else if ts.Hour() >= 21 {
            base = 0.45
          }
        } else if ts.Hour() >= 15 && ts.Hour() < 16 {
          base = 0.36
        } else if ts.Hour() >= 16 && ts.Hour() < 21 {
          base = 0.38
        } else if ts.Hour() >= 21 {
          base = 0.36
        };
        base
